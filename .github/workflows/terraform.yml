name: 'Terraform'
on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  # GH - github.token secret, a built-in secret in GitHub.
  GITHUB_TOKEN: ${{ github.token }}
  # TF - Verbosity setting for Terraform logs
  TF_LOG: ERROR
  # AWS - S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
  # AWS - IAM role
  AWS_ROLE: ${{ secrets.AWS_ROLE }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.6

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: $AWS_ROLE
        aws-region: ${{ vars.AWS_REGION }}

    - name: Run AWS CLI command to get Security Token Service
      run: aws sts get-caller-identity

    - name: Terraform init
      id: init
      run: terraform init -backend-config=prod.backend.tfbackend -backend-config="bucket=$BUCKET_TF_STATE" -no-color

    - name: Terraform format
      id: fmt
      run: terraform fmt -check -no-color

    - name: Terraform validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -no-color
